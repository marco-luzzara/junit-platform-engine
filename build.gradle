plugins {
    id 'java'
    id 'com.diffplug.spotless' version '5.11.1'
    id "com.github.carlobellettini.assertj-generator-gradle-plugin-p" version "1.0"
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

group 'vec.testengine'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.github.docker-java:docker-java-core:3.2.8'
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:3.2.8'
    implementation 'org.junit.platform:junit-platform-commons:1.7.0'
    implementation 'org.junit.platform:junit-platform-engine:1.7.0'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.platform:junit-platform-testkit:1.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
    testImplementation 'org.assertj:assertj-core:3.6.2'
    testImplementation 'javax.annotation:javax.annotation-api:1.2-b01'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

// to run also dockerized tests if you are in the host environment use the following method
//static def setTestingEnvironment(Test task) {
//    task.systemProperty 'testingEnvironment', System.getProperty('testingEnvironment') == null ?
//            'host' :
//            System.getProperty('testingEnvironment')
//}
// and call it with
//  setTestingEnvironment(this.test)
// https://stackoverflow.com/questions/21406265/how-to-give-system-property-to-my-test-via-gradle-and-d

test {
    filter {
        includeTestsMatching 'vec.myproject.*'
    }
    useJUnitPlatform() {
        excludeEngines 'docker-engine'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testWithDocker(type: Test) {
    group 'verification'
    filter {
        includeTestsMatching 'vec.myproject.*'
    }
    useJUnitPlatform() {
        excludeEngines 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task testEngine(type: Test) {
    group 'verification'
    filter {
        includeTestsMatching 'vec.engine.*'
        excludeTestsMatching 'vec.engine.sample.*'
    }
    useJUnitPlatform() {
        excludeEngines 'docker-engine'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

configurations.testImplementation.canBeResolved = true
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
task fatJar(type: ShadowJar) {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    archiveClassifier.set("tests")
    from sourceSets.test.output
    configurations = [project.configurations.testImplementation]
}

tasks.withType(Test).configureEach {
    dependsOn fatJar
}

spotless {
    java {
        googleJavaFormat()
        target project.fileTree(project.rootDir) {
            include '**/*.java'
            exclude '**/generated-java/**'
        }
    }
}

assertjGenerator {
    classOrPackageNames = ['vec.myproject.Employee']
    privateFields = true
}
